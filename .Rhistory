# Load data from CSV
data <- read.csv("data/cema_internship_task_2023.csv")
# Preview the data
head(data)
# Load stringr library
library(stringr)
# Remove 'County' suffix
data$county <- gsub("County$", "", data$county)
# Remove leading and trailing whitespaces in the 'county' column
data$county <- str_trim(data$county)
# Load dplyr package with message suppressed
suppressMessages(library(dplyr))
# Get concise summary
glimpse(data)
# Get a more detailed summary
summary(data)
# Get unique values in the 'county' column
unique_counties <- unique(data$county)
# Get the number of unique values
num_unique_counties <- length(unique_counties)
# Print unique values and number of unique values
cat("Unique Counties:\n")
cat(paste(unique_counties, collapse = ", "))
cat("\nNumber of Unique Counties:", num_unique_counties)
# Function to check for missing values
check_and_print_missing_values <- function(data) {
missing_values <- colSums(is.na(data))
total_rows <- nrow(data)
columns_with_missing <- names(missing_values[missing_values > 0])
missing_counts <- missing_values[missing_values > 0]
missing_percent <- (missing_counts / total_rows) * 100
if (length(columns_with_missing) > 0) {
cat("Columns with missing values:\n")
for (i in seq_along(columns_with_missing)) {
cat(columns_with_missing[i], ": ", missing_counts[i], " missing values (",
sprintf("%.2f%%", missing_percent[i]), " of total rows)\n")
}
} else {
cat("No missing values found in any column.\n")
}
}
# Use function to check for missing values
check_and_print_missing_values(data)
# Function to check for duplicates
check_duplicate_rows <- function(data) {
duplicated_rows <- anyDuplicated(apply(data, 1, paste, collapse = ""))
if (duplicated_rows > 0) {
return("There are duplicate rows in the data.")
} else {
return("There are no duplicate rows in the data.")
}
}
# Use the function to check for duplicates
check_duplicate_rows(data)
# Subset the data to include only 'county' and 'Acute.Malnutrition' columns
missing_values_data <- data %>%
select(county, Acute.Malnutrition)
# Calculate number of missing values for each county in 'Acute.Malnutrition' column
missing_counts <- missing_values_data %>%
group_by(county) %>%
summarize(Missing_Values = sum(is.na(Acute.Malnutrition)))
# Sort counties based on the number of missing values in descending order
sorted_missing_counts <- missing_counts %>%
arrange(desc(Missing_Values))
# Select the top 15 counties with the most missing values
top_15_counties_with_missing_values <- head(sorted_missing_counts, 15)
# Print the result
print(top_15_counties_with_missing_values)
# Load ggplot2
library(ggplot2)
# Calculate the average acute malnutrition value for each county
average_values <- data %>%
group_by(county) %>%
summarize(Avg_Acute_Malnutrition = mean(Acute.Malnutrition, na.rm = TRUE))
# Create a horizontal bar plot to visualize the average values
ggplot(average_values, aes(x = Avg_Acute_Malnutrition, y = reorder(county, Avg_Acute_Malnutrition))) +
geom_bar(stat = "identity", fill = "dodgerblue") +
labs(x = "Average Acute Malnutrition",
y = "Counties",
title = "Average Acute Malnutrition by County") +
theme_minimal()
# Replace missing values with zeros
data <- data %>%
mutate(
Acute.Malnutrition = if_else(is.na(Acute.Malnutrition), 0, Acute.Malnutrition),
stunted.6.23.months = if_else(is.na(stunted.6.23.months), 0, stunted.6.23.months),
stunted.0..6.months = if_else(is.na(stunted.0..6.months), 0, stunted.0..6.months),
stunted.24.59.months = if_else(is.na(stunted.24.59.months), 0, stunted.24.59.months)
)
# Confirm missing values have been replaced
check_and_print_missing_values(data)
# Convert 'period' to a Date object for proper plotting
data$period <- as.Date(paste("01", data$period), format = "%d %b-%y")
# Calculate the average deworming and average diarrhea cases over time
average_trends <- data %>%
group_by(period) %>%
summarize(Avg_Total_Deworming = mean(Total.Dewormed, na.rm = TRUE),
Avg_Diarrhea_Cases = mean(diarrhoea.cases, na.rm = TRUE))
# Create a line plot to visualize the trends
ggplot(average_trends, aes(x = period)) +
geom_line(aes(y = Avg_Total_Deworming, color = "Average Total Deworming")) +
geom_line(aes(y = Avg_Diarrhea_Cases, color = "Average Diarrhea Cases")) +
labs(x = "Period",
y = "Average Count",
title = "Trends of Average Deworming and Diarrhea Cases",
color = "Indicator") +
theme_minimal()
# Calculate the average values for the three specified columns over time
average_trends <- data %>%
group_by(period) %>%
summarize(Avg_stunted_6_23_months = mean(`stunted.6.23.months`, na.rm = TRUE),
Avg_stunted_0_6_months = mean(`stunted.0..6.months`, na.rm = TRUE),
Avg_stunted_24_59_months = mean(`stunted.24.59.months`, na.rm = TRUE))
# Convert data from wide to long format for better plotting
average_trends_long <- tidyr::pivot_longer(average_trends,
cols = starts_with("Avg_stunted"),
names_to = "Indicator",
values_to = "Average_Count")
# Create a line plot to visualize the temporal trends
ggplot(average_trends_long, aes(x = period, y = Average_Count, color = Indicator)) +
geom_line() +
labs(x = "Period",
y = "Average Count",
title = "Trends of Average Stunted Cases for Various Ages Groups",
color = "Indicator") +
theme_minimal() +
scale_color_manual(values = c("red", "blue", "green"),
labels = c("6-23 months", "0-6 months", "24-59 months"))
# Calculate average values for the three specified columns over time
average_trends <- data %>%
group_by(period) %>%
summarize(Avg_Underweight_0_6_months = mean(`Underweight.0..6.months`, na.rm = TRUE),
Avg_Underweight_6_23_months = mean(`Underweight.6.23.months`, na.rm = TRUE),
Avg_Underweight_24_59_months = mean(`Underweight.24.59.Months`, na.rm = TRUE))
# Convert data from wide to long format for better plotting
average_trends_long <- tidyr::pivot_longer(average_trends,
cols = starts_with("Avg_Underweight"),
names_to = "Indicator",
values_to = "Average_Count")
# Create a line plot to visualize the trends
ggplot(average_trends_long, aes(x = period, y = Average_Count, color = Indicator)) +
geom_line() +
labs(x = "Period",
y = "Average Count",
title = "Trends of Average Underweight Cases for Various Ages Groups",
color = "Indicator") +
theme_minimal() +
scale_color_manual(values = c("purple", "darkorange", "brown"),
labels = c("0-6 months", "6-23 months", "24-59 months"))
# Calculate the average values for the 'Acute.Malnutrition' column over time
average_trends <- data %>%
group_by(period) %>%
summarize(Avg_Acute_Malnutrition = mean(`Acute.Malnutrition`, na.rm = TRUE))
# Create a line plot to visualize the temporal trends for 'Acute.Malnutrition'
ggplot(average_trends, aes(x = period, y = Avg_Acute_Malnutrition)) +
geom_line(color = "red") +
labs(x = "Period",
y = "Average Count",
title = "Trends of Average Acute Malnutrition Cases",
color = "Indicator") +
theme_minimal()
# Calculate the average values for the three specified columns by county
averages_by_county <- data %>%
group_by(county) %>%
summarize(Avg_stunted_6_23_months = mean(`stunted.6.23.months`, na.rm = TRUE),
Avg_stunted_0_6_months = mean(`stunted.0..6.months`, na.rm = TRUE),
Avg_stunted_24_59_months = mean(`stunted.24.59.months`, na.rm = TRUE))
# Convert data from wide to long format for better plotting
averages_by_county_long <- tidyr::pivot_longer(averages_by_county,
cols = starts_with("Avg_stunted"),
names_to = "Indicator",
values_to = "Average_Count")
# Create a stacked horizontal bar plot
ggplot(averages_by_county_long, aes(y = county, x = Average_Count, fill = Indicator)) +
geom_bar(stat = "identity") +
labs(x = "Average Count",
y = "County",
title = "Average Stunted Cases by County for Various Ages",
fill = "Indicator") +
scale_fill_discrete(labels = c("0-6 months", "24-59 months", "6-23 months")) +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1),
legend.position = "bottom")
# Calculate the average values for the three specified columns by county
averages_by_county <- data %>%
group_by(county) %>%
summarize(Avg_Underweight_0_6_months = mean(`Underweight.0..6.months`, na.rm = TRUE),
Avg_Underweight_6_23_months = mean(`Underweight.6.23.months`, na.rm = TRUE),
Avg_Underweight_24_59_months = mean(`Underweight.24.59.Months`, na.rm = TRUE))
# Convert data from wide to long format for better plotting
averages_by_county_long <- tidyr::pivot_longer(averages_by_county,
cols = starts_with("Avg_Underweight"),
names_to = "Indicator",
values_to = "Average_Count")
# Create a stacked horizontal bar plot
ggplot(averages_by_county_long, aes(y = county, x = Average_Count, fill = Indicator)) +
geom_bar(stat = "identity") +
labs(x = "Average Count",
y = "County",
title = "Average Underweight Cases by County for Various Ages",
fill = "Indicator") +
scale_fill_discrete(labels = c("0-6 months", "6-23 months", "24-59 months")) +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1),
legend.position = "bottom")
# Calculate the sum of Total Deworming for each county for the entire period
sum_by_county <- data %>%
group_by(county) %>%
summarize(Sum_Total_Dewormed = sum(Total.Dewormed, na.rm = TRUE)) %>%
arrange(desc(Sum_Total_Dewormed))  # Sort in descending order
# Convert the 'county' column to a factor with levels sorted in descending order of the sum
sum_by_county$county <- factor(sum_by_county$county,
levels = rev(sum_by_county$county))
# Create a horizontal bar plot to visualize the sum of Total Dewormed per county
ggplot(sum_by_county, aes(x = Sum_Total_Dewormed, y = county)) +
geom_bar(stat = "identity", fill = "dodgerblue") +
labs(x = "Total Dewormed",
y = "County",
title = "Total Dewormed per County",
fill = "") +
theme_minimal()
# Calculate the sum of diarrhea cases for each county for the entire period
sum_diarrhea_by_county <- data %>%
group_by(county) %>%
summarize(Sum_Diarrhea_Cases = sum(diarrhoea.cases, na.rm = TRUE)) %>%
arrange(desc(Sum_Diarrhea_Cases))  # Sort in descending order
# Convert the 'county' column to a factor with levels sorted in descending order of the sum
sum_diarrhea_by_county$county <- factor(sum_diarrhea_by_county$county,
levels = rev(sum_diarrhea_by_county$county))
# Create a horizontal bar plot to visualize the sum of diarrhea cases per county
ggplot(sum_diarrhea_by_county, aes(x = Sum_Diarrhea_Cases, y = county)) +
geom_bar(stat = "identity", fill = "cyan4") +
labs(x = "Total Diarrhea Cases",
y = "County",
title = "Total Diarrhea Cases per County",
fill = "") +
theme_minimal()
# Load sf library
library(sf)
# Read the shapefile
shapefile <- st_read("shapefiles")
# Preview the shapefile
head(shapefile)
# Step 1: Aggregate the data to get total Acute Malnutrition cases for each county
aggregated_data <- data %>%
group_by(county) %>%
summarize(Total_Acute_Malnutrition = sum(Acute.Malnutrition, na.rm = TRUE))
# Step 2: Merge aggregated data with the shapefile
merged_data <- merge(shapefile, aggregated_data, by.x = "Name", by.y = "county")
# Set the CRS for the merged_data to match the CRS of the shapefile
st_crs(merged_data) <- st_crs(shapefile)
# Step 3: Create the choropleth map for total Acute Malnutrition cases
ggplot() +
geom_sf(data = merged_data, aes(fill = Total_Acute_Malnutrition)) +
scale_fill_gradient(low = "#e5f5f9", high = "#2ca25f") +
labs(title = "Total no. of Children <5 years with Acute Malnutrition",
subtitle = "Jan 2021 to Jun 2023",
fill = "Total Acute Malnutrition Cases") +
theme_minimal()
# Aggregate the data to get total diarrhoea cases for each county
aggregated_data <- data %>%
group_by(county) %>%
summarize(Total_diarrhoea_cases = sum(diarrhoea.cases, na.rm = TRUE))
# Merge aggregated data with the shapefile
merged_data <- merge(shapefile, aggregated_data, by.x = "Name", by.y = "county")
# Set the CRS for the merged_data to match the CRS of the shapefile
st_crs(merged_data) <- st_crs(shapefile)
# Create the choropleth map for total diarrhoea cases
ggplot() +
geom_sf(data = merged_data, aes(fill = Total_diarrhoea_cases)) +
scale_fill_gradient(low = "#ffeda0", high = "#f03b20") +
labs(title = "Total no. of Children <5 years with Diarrhoea",
subtitle = "Jan 2021 to Jun 2023",
fill = "Total Diarrhoea Cases") +
theme_minimal()
# Aggregate the data to get total dewormed cases for each county
aggregated_data <- data %>%
group_by(county) %>%
summarize(Total_dewormed = sum(Total.Dewormed, na.rm = TRUE))
# Merge aggregated data with the shapefile
merged_data <- merge(shapefile, aggregated_data, by.x = "Name", by.y = "county")
# Set the CRS for the merged_data to match the CRS of the shapefile
st_crs(merged_data) <- st_crs(shapefile)
# Create the choropleth map
ggplot() +
geom_sf(data = merged_data, aes(fill = Total_dewormed)) +
scale_fill_gradient(low = "#e7e1ef", high = "#dd1c77") +
labs(title = "Total Number of Children Dewormed",
subtitle = "Jan 2021 to Jun 2023",
fill = "Total Dewormed") +
theme_minimal()
# Aggregate the data to get avg underweight (24-59) months for each county
aggregated_data <- data %>%
group_by(county) %>%
summarize(Avg_Underweight_24_59 = mean(Underweight.24.59.Months, na.rm = TRUE))
# Merge aggregated data with the shapefile
merged_data <- merge(shapefile, aggregated_data, by.x = "Name", by.y = "county")
# Set the CRS for the merged_data to match the CRS of the shapefile
st_crs(merged_data) <- st_crs(shapefile)
# Create the choropleth map
ggplot() +
geom_sf(data = merged_data, aes(fill = Avg_Underweight_24_59)) +
scale_fill_gradient(low = "#e0ecf4", high = "#8856a7") +
labs(title = "Average no. of Underweight Children (24-59 months)",
subtitle = "Jan 2021 to Jun 2023",
fill = "Avg no. of underweight") +
theme_minimal()
# Aggregate the data to get avg stunted (24-59) months for each county
aggregated_data <- data %>%
group_by(county) %>%
summarize(Avg_stunted_24_59 = mean(stunted.24.59.months, na.rm = TRUE))
# Merge aggregated data with the shapefile
merged_data <- merge(shapefile, aggregated_data, by.x = "Name", by.y = "county")
# Set the CRS for the merged_data to match the CRS of the shapefile
st_crs(merged_data) <- st_crs(shapefile)
# Create the choropleth map
ggplot() +
geom_sf(data = merged_data, aes(fill = Avg_stunted_24_59)) +
scale_fill_gradient(low = "#edf8b1", high = "#2c7fb8") +
labs(title = "Average no. of Children Stunted (24-59 months)",
subtitle = "Jan 2021 to Jun 2023",
fill = "Avg Stunted") +
theme_minimal()
